pipeline {
    agent any
    environment {
        //Set the testing parameters
        KUBECONFIG = '/path/to/your/kubeconfig.yaml'
        // Set your GKE cluster information
        GKE_PROJECT_ID = 'protean-quanta-393311'
        GKE_CLUSTER_NAME = 'my-cluster'
        GKE_ZONE = 'us-central1-c'
        DOCKER_IMAGE_NAME = 'avital1093/flask_project'
        GKE_NAMESPACE = 'your-namespace' // Set the desired namespace for GKE deployment
    }

    stages {
        stage('Cleanup') {
            steps {
                //delete everything from the working directory
                sh 'rm -rf *'
            }
        }
        stage('Clone') {
            steps {
                //get the flask project from github
                sh 'git clone https://github.com/avitalavital/flask.git'
            }
        }
        stage('Build') {
            steps {
                //mini clean up
                sh 'docker image prune -a'
                sh 'docker container prune -f'
                //build a docker image
                sh 'cd flask && docker build -t avital1093/flask_project:latest .'
            }
        }
        stage('Push to Docker Hub') {
            steps {
                //avoid exposing your credentials
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    // push the image to docker hub
                    sh 'docker push avital1093/flask_project'
                }
            }
        }
        stage('Prep Test Srv') {
            steps {
                // Authenticate with Kubernetes using kubeconfig
                withKubeConfig(credentialsConfig: 'your-kubeconfig-credentials', kubeconfigId: 'kubeconfig') {
                    // Deploy the application to Kubernetes using kubectl apply
                    sh "kubectl apply -f flask/flask_kubernetes.yml -n $GKE_NAMESPACE"
                }
            }
        }
        stage('Testing') {
            steps {
                script {
                    //get the response code from the flask
                    def response = sh(returnStdout: true, script: "curl -s -o /dev/null -w '%{http_code}' http://192.168.59.1:30082")
                    //check if its available 
                    if (response.trim() == '200') {
                        echo 'Flask app returned a 200 status code. Test passed!'
                    } else {
                        echo "Flask app returned a non-200 status code: ${response.trim()}. Test failed!"
                        error('Test failed!') // Abort the pipeline with an error status
                    }
                }
            }
        }
        stage('Deploy to Prod') {
            steps {
                // Authenticate with Google Cloud SDK
                sh 'gcloud auth activate-service-account --key-file=/var/lib/jenkins/protean-quanta.json'
                
                // Get the GKE cluster credentials
                sh "gcloud container clusters get-credentials $GKE_CLUSTER_NAME --project $GKE_PROJECT_ID --zone $GKE_ZONE"

                // Configure kubectl context for GKE
                sh 'kubectl config set-context $(kubectl config current-context)'

                // Deploy the application to GKE using kubectl apply
                sh "kubectl apply -f flask/flask_kubernetes.yml -n $GKE_NAMESPACE"

                // Wait for the deployment to complete (optional)
                sh 'kubectl rollout status deployment/$YOUR_DEPLOYMENT_NAME --namespace=$GKE_NAMESPACE'
            }
        }
    }
}
