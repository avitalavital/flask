pipeline {
    agent any
    environment {
        TEST_SRV_IP = '13.51.158.92'
        PROD_SRV_IP = '13.53.177.47'
    }

    stages {
        stage('Cleanup') {
            steps {
                sh 'rm -rf *'
            }
        }
        stage('Clone') {
            steps {
                sh 'git clone https://github.com/avitalavital/flask.git'
            }
        }

        stage('build') {
            steps {
                sh 'docker image prune -a'
                sh 'docker container prune -f'
                sh 'cd flask && docker build -t avital1093/flask_project:latest .'
            }
        }
        stage('push to docker hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} "
                    sh 'docker push avital1093/flask_project'
                }
            }
        }
        stage('prep test srv') {
            steps {
                script {
                    sh """
                    ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/my_key_pair.pem ec2-user@${TEST_SRV_IP} '
                    sudo yum install docker -y
                    sudo systemctl enable docker
                    sudo systemctl start docker
                    sudo docker stop \$(sudo docker ps -aq)
                    sudo docker rm \$(sudo docker ps -aq)
                    sudo docker rmi \$(sudo docker images -q)
                    sudo docker run -d -p 5000:5000 avital1093/flask_project
                    '
                    """
                }
            }
        }

        stage('Testing') {
            steps {
                script {
                    def response = sh(returnStdout: true, script: "curl -s -o /dev/null -w '%{http_code}' http://${TEST_SRV_IP}:5000")
                    if (response.trim() == '200') {
                        echo 'Flask app returned a 200 status code. Test passed!'
                    } else {
                        echo "Flask app returned a non-200 status code: ${response.trim()}. Test failed!"
                        error('Test failed!') // Abort the pipeline with an error status
                    }
                }
            }
        }
    }
}
